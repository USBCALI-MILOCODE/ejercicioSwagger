package co.com.rodriguezCaicedo.microservice.resolveEnigmaApi3.api;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;

import com.fasterxml.jackson.databind.ObjectMapper;

import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi3.model.GetEnigmaRequest;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi3.model.GetEnigmaStepResponse;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi3.model.Header;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi3.model.JsonApiBodyRequest;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi3.model.JsonApiBodyResponseSuccess;
import io.swagger.annotations.ApiParam;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-03-06T18:57:51.220216900-05:00[America/Bogota]")
@Controller
public class GetStepApiController implements GetStepApi {
	 private final ObjectMapper objectMapper;
	    private final HttpServletRequest request;

	    public GetStepApiController(ObjectMapper objectMapper, HttpServletRequest request) {
	        this.objectMapper = objectMapper;
	        this.request = request;
	    }

	    public ResponseEntity<List<JsonApiBodyResponseSuccess>> getStep(@ApiParam(value = "request body get enigma step", required = true) @Valid @RequestBody JsonApiBodyRequest body) {
	        List<GetEnigmaRequest> enigmas = body.getData();
	        List<JsonApiBodyResponseSuccess> responseList = new ArrayList<>();

	        for (GetEnigmaRequest enigma : enigmas) {
	            // Obtener los datos del enigma
	            Header header = enigma.getHeader();
	            String id = header.getId();
	            String type = header.getType();
	            String enigmaQuestion = enigma.getEnigma();

	            // Resolver el enigma
	            String solution = solveEnigma(enigmaQuestion);

	            // Construir la respuesta
	            GetEnigmaStepResponse enigmaStepResponse = new GetEnigmaStepResponse();
	            enigmaStepResponse.setId(id);
	            enigmaStepResponse.setType(type);
	            enigmaStepResponse.setSolution(solution);

	            // Construir la respuesta JSON
	            JsonApiBodyResponseSuccess responseBody = new JsonApiBodyResponseSuccess();
	            responseBody.addDataItem(enigmaStepResponse);
	            responseList.add(responseBody);
	        }

	        return new ResponseEntity<>(responseList, HttpStatus.OK);
	    }

	    // MÃ©todo para resolver el enigma
	    private String solveEnigma(String enigmaQuestion) {
	        return "Step1: Open the regrigerator -  Step2: Put the giraffe in - Step3: Close de door.";
	    }

}
